A3Q1
Suppose an array called scores contains the elements 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
In an organized manner, trace the execution of Sequential Search and Binary Search Algorithms to search for the following elements
a) 72    b) 41     c) 50

a) Sequential: 
while the number is not found, checks each element in the array
    if the end of the list is reached and the number is not found, the number is not in the array

X = element is not searched number

23 X
27 X
30 X
34 X
41 X
51 X
55 X
57 X
60 X
67 X
72 G

    Binary: array index starts at 0
while the checked element is not the number being searched, splits the array into two.
        since the initial array is sorted, only search the half which might contain the number (greater than or less than comparison)
    if the length of the array to be checked is one, and that element is not the number being searched, the number is not in the array

X = element is not the searched number
G = element is the searched number

23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                            X
                                60, 67, 72, 78, 83, 96
                                            X
                                60, 67, 72
                                    X
                                        72
                                        G
b) Sequential:
23 X
27 X
30 X
34 X
41 G

    Binary:
23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                            X
23, 27, 30, 34, 41, 51, 55
            X
                41, 51, 55
                    X
                41
                G

c) Sequential:
23 X
27 X
30 X
34 X
41 X
51 X
55 X
57 X
60 X
67 X
72 X
78 X
83 X
96 X
NOT IN THE ARRAY

    Binary:
23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                            X
23, 27, 30, 34, 41, 51, 55
            X
                41, 51, 55
                    X
                41
                X
                        NOT IN THE ARRAY

A3Q2
Trace through the execution of Bubble Sort as it sorts through the following array in ascending 
order:  25  30  20  80  40  60

limit = array length
"sorted" = false
while the sorting limit is NOT <= 1 AND NOT "sorted"
    sorted = true
    compare adjacent numbers
        if not in order, swap --> sorted = false
    proceed onto next pair
    once limit reached
        decrease limit by one

| IS LIMIT
TRUE/FALSE is state of "sorted" after each comparison/swap

25  30  20  80  40  60| FALSE
[25 30] 20 80 40 60| FALSE
25 [20 30] 80 40 60| FALSE
25 20 [30 80] 40 60| FALSE
25 20 30 [40 80] 60| FALSE
25 20 30 40 [60 80]| FALSE
[20 25] 30 40 60| 80 FALSE
20 [25 30] 40 60| 80 FALSE
20 25 [30 40] 60| 80 FALSE
20 25 30 [40 60]| 80 FALSE
20 25 30 40| 60 80 FALSE
retrace the array, this time the check is TRUE, since nothing is swapped


DONE SORTING : 20 25 30 40 60 80

A3Q3
What is the maximum number of comparisons that might be required to perform a binary search on a 
list containing seven items? Explain the situation and include an example of such a list and 
search.

the max number is 3 comparisons, or log(7)/log(2) rounded up. This is because binary search halves the array each time.

1 2 3 4 5 6 7 --- looking for 1

1 2 3 4 5 6 7
      X     -------- 1
1 2 3
  X         ------- 2
1           ------- 3
G

A3Q4
For large arrays, in the worst case, is selection sort faster than insertion sort? Explain.

for a worst case, selection sort would loop through each element greater than an element X, for each such element X. Therefore, it's O(n^2).
for a worst case, insertion sort would mimic the loop for the selection sort, also making it O(n^2)
since the two have the same big O analysis, either one would work as well as the other for large arrays for the worst case.
