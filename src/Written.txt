A3Q1
Suppose an array called scores contains the elements 23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
In an organized manner, trace the execution of Sequential Search and Binary Search Algorithms to search for the following elements
a) 72    b) 41     c) 50

a) Sequential: 
goes through each one... if not num then X, if yes then G, stop
if end of array and not num, then num isn't in the array
23 X
27 X
30 X
34 X
41 X
51 X
55 X
57 X
60 X
67 X
72 G

    Binary: 
 check is (array size)/2
 if check is not num, splits array into two halves, excluding the checked number, and only continuing process on the half that contains the number (greater than or less than comparison since the arrays are all sorted)
 if check is num, stop
 if can't split anymore, num isn't in the array
X = not num
G = num

23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                            X
                                60, 67, 72, 78, 83, 96
                                            X
                                60, 67, 72
                                    X
                                        72
                                    
b) Sequential:
23 X
27 X
30 X
34 X
41 G

    Binary:
23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                            X
23, 27, 30, 34, 41, 51, 55
            X
                41, 51, 55
                    X
                41
                G

c) Sequential:
23 X
27 X
30 X
34 X
41 X
51 X
55 X
57 X
60 X
67 X
72 X
78 X
83 X
96 X
NOT IN THE ARRAY

    Binary:
23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96
                            X
23, 27, 30, 34, 41, 51, 55
            X
                41, 51, 55
                    X
                        55
                        X
                        NOT IN THE ARRAY

A3Q2
Trace through the execution of Bubble Sort as it sorts through the following array in ascending 
order:  25  30  20  80  40  60

limit = array length
"sorted" = false
while the sorting limit is NOT <= 1 AND not "sorted"
sorted = true
compare adjacent nums
    if not in order, swap, sorted = false
proceed onto next pair
once limit reached
    check state of "sorted"
    decrease limit by one
    repeat whole process
| IS LIMIT
TRUE/FALSE is state of "sorted" after check

25  30  20  80  40  60| FALSE
[25 30] 20 80 40 60| FALSE
25 [30 20] 80 40 60| FALSE
25 20 [30 80] 40 60| FALSE
25 20 30 [80 40] 60| FALSE
25 20 30 40 [80 60]| FALSE
25 20 30 40 60 80| FALSE
[25 20] 30 40 60| 80 FALSE
20 [25 30] 40 60| 80 FALSE
20 25 [30 40] 60| 80 FALSE
20 25 30 [40 60]| 80 FALSE
20 25 30 40| 60 80 FALSE
retrace the array, this time the check is TRUE, since nothing is swapped


DONE SORTING : 20 25 30 40 60 80

A3Q3
What is the maximum number of comparisons that might be required to perform a binary search on a 
list containing seven items? Explain the situation and include an example of such a list and 
search.

the max number is 3 comparisons, or log(7)/log(2) rounded up

1 2 3 4 5 6 7 --- looking for 1

1 2 3 4 5 6 7
        X   -------- 1
1 2 3
  X         ------- 2
1           ------- 3
G

A3Q4
For large arrays, in the worst case, is selection sort faster than insertion sort? Explain.
selection sort loops through each element for each element, thus  making it n*n/2... O(n^2)
insertion sort loops through a decreasingly smaller number of elements, for each element, thus making it n*n/2... O(n^2) as well
Therefore they are the same

